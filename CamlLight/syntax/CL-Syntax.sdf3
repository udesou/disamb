module CL-Syntax

//  SDF3 context-free grammar for the Caml Light language

imports CL-Lexical


context-free start-symbols

  Start

context-free syntax

  Start = CL-implementation 
//  Start = CL-interface 
  CL-nothing.CLNothing =  

//Global names
//CL-global-name = 
//  CL-ident
//CL-global-name.CLGlobal = 
//  CL-ident "__" CL-ident
//Insisting on case distinctions in names (as in OCaml):
  CL-lowercase-global-name.CLLowercaseIdent = 
  	CL-lowercase-ident 
  CL-lowercase-global-name.CLIdentLowercaseIdent = 
  	CL-ident "__" CL-lowercase-ident 
  CL-capitalized-global-name.CLCaptializedIdent = 
  	CL-capitalized-ident 
  CL-capitalized-global-name.CLIdentCaptializedIdent = 
  	CL-ident "__" CL-capitalized-ident 
  CL-variable.CLVarName = 
  	CL-lowercase-global-name 
  CL-variable.CLPrefix = 
  	"prefix" CL-operator-name 
  CL-operator-name.CLInfixOp = 
  	CL-infix-op 
  CL-operator-name.CLDeref = 
  	"!" 

// Added for pretty-print:
//  CL-operator-name-plus.CLoperatornameplus = CL-operator-name+
//  CL-operator-name-star.CLoperatornamestar = CL-operator-name*
  
  CL-infix-op.CLInfix1 = CL-infix-op-1 
  CL-infix-op.CLInfix2 = CL-infix-op-2 
  CL-infix-op.CLInfix3 = CL-infix-op-3 
  CL-infix-op.CLInfix4 = CL-infix-op-4 
  CL-infix-op.CLInfix5 = CL-infix-op-5 
  CL-infix-op.CLInfix6 = CL-infix-op-6 
  CL-infix-op.CLInfix7 = CL-infix-op-7 
//CL-prefix-op.CLPrefix1 = CL-prefix-op-1
//CL-prefix-op.CLPrefix2 = CL-prefix-op-2
//A constr could be a cconstr or a ncconstr
  CL-constr.CLConstrName = 
  	CL-capitalized-global-name 
  CL-constr.CLFalse = 
  	"false" // added
  CL-constr.CLTrue = 
  	"true"   // added
  CL-constr.CLNil = 
  	"[" "]" 
  CL-constr.CLNull = 
  	"(" ")" 
  CL-constr.CLCons = 
    "prefix" "::"
  CL-typeconstr.CLLowercaseGlobalName = 
  	CL-lowercase-global-name 
  CL-label.CLLowercaseGlobalName = 
  	CL-lowercase-global-name 

// Type expressions
  CL-typexpr.CLTypeVariable = 
  	CL-quote CL-lowercase-ident 
  CL-typexpr = 
  	"(" CL-typexpr ")" {bracket}
  CL-typexpr.CLFunction = 
  	CL-typexpr "->" CL-typexpr {right}
  CL-typexpr.CLProduct = 
  	CL-typexpr "*" CL-typexpr CL-star-typexpr* {non-assoc} 
  CL-typexpr.CLTypeConstr = 
  	CL-typeconstr 
  CL-typexpr.CLInstance = 
  	CL-typexpr CL-typeconstr 
  CL-typexpr.CLMultiInstance = 
  	"(" CL-typexpr "," CL-typexpr CL-comma-typexpr* ")" CL-typeconstr 

// Constants
  CL-constant.CLInteger = 
  	CL-integer-literal 
  CL-constant.CLFloat = 
  	CL-float-literal 
  CL-constant.CLChar = 
  	CL-char-literal 
  CL-constant.CLString = 
  	CL-string-literal 
  CL-constant.CLConstr = 
  	CL-constr 

// Patterns
  CL-pattern.CLPatternIdent = 
  	CL-lowercase-ident 
  CL-pattern.CLWild = 
  	"_" 
  CL-pattern.CLAs = 
  	CL-pattern "as" CL-lowercase-ident 
  CL-pattern = 
  	"(" CL-pattern ")" {bracket}
  CL-pattern.CLPatternTyped = 
  	"(" CL-pattern ":" CL-typexpr ")" 
  CL-pattern.CLElse = 
  	CL-pattern "|" CL-pattern  {left} 
  CL-pattern.CLPatternConstant =
  	CL-constant 
  CL-pattern.CLPatternConstr = 
  	CL-constr CL-pattern 
  CL-pattern.CLPatternTuple = 
  	CL-pattern "," CL-pattern CL-comma-pattern*  {non-assoc}
  CL-pattern.CLPatternRecord = 
  	"{" CL-label "=" CL-pattern CL-semic-label-pattern* "}" 
  CL-pattern.CLPatternList = 
  	"[" CL-pattern CL-semic-pattern* "]" 
  CL-pattern.CLPatternCons = 
  	CL-pattern "::" CL-pattern  {right} 

// Expressions
//  CL-ident omitted
  CL-expr.CLVariable = 
  	CL-variable 
  CL-expr.CLConstant = 
  	CL-constant 
  CL-expr = 
  	"(" CL-expr ")" {bracket}
  CL-expr = 
  	"begin" CL-expr "end" {bracket}
  CL-expr.CLTyped = 
  	"(" CL-expr ":" CL-typexpr ")" 
  CL-expr.CLTuple = 
  	CL-expr "," CL-expr CL-comma-expr*  {non-assoc} 
////  CL-expr.CLConstr = 
////  	CL-constr CL-expr  {avoid}
  CL-expr.CLCons = 
  	CL-expr "::" CL-expr  {right}
  CL-expr.CLList = 
  	"[" CL-expr CL-semic-expr* "]" 
  CL-expr.CLVector = 
  	"[|" CL-expr CL-semic-expr* "|]" 
  CL-expr.CLEmptyVector = 
  	"[|" "|]" 
  CL-expr.CLRecord = 
  	"{" CL-label "=" CL-expr CL-semic-label-expr* "}" 
  CL-expr.CLApp =
  	CL-expr CL-expr  {left, avoid}
//CL-expr.CLPrefix = 
//  CL-prefix-op CL-expr
  CL-expr.CLPrefix1 = 
  	CL-prefix-op-1 CL-expr 
  CL-expr.CLPrefix2 = 
  	CL-prefix-op-2 CL-expr  {avoid}
//CL-expr.CLInfix = 
//  CL-expr CL-infix-op CL-expr
  CL-expr.CLInfix1 = 
  	CL-expr CL-infix-op-1 CL-expr  {right}
  CL-expr.CLInfix2 = 
  	CL-expr CL-infix-op-2 CL-expr  {left}
  CL-expr.CLInfix3 = 
  	CL-expr CL-infix-op-3 CL-expr  {left}
  CL-expr.CLInfix4 = 
  	CL-expr CL-infix-op-4 CL-expr  {left}
  CL-expr.CLInfix5 = 
  	CL-expr CL-infix-op-5 CL-expr  {right}
  CL-expr.CLInfix6 = 
  	CL-expr CL-infix-op-6 CL-expr  {left}
  CL-expr.CLInfix7 = 
  	CL-expr CL-infix-op-7 CL-expr  {right}
  CL-expr.CLField = 
  	CL-expr "." CL-label 
  CL-expr.CLFieldUpdate = 
  	CL-expr "." CL-label "<-" CL-expr  {right}
  CL-expr.CLComponent = 
  	CL-expr "." "(" CL-expr ")" 
  CL-expr.CLComponentUpdate = 
  	CL-expr "." "(" CL-expr ")" "<-" CL-expr  {right}
  CL-expr.CLNot = 
  	"not" CL-expr  // added
  CL-expr.CLAnd = 
  	CL-expr "&" CL-expr  {left} 
  CL-expr.CLOr = 
  	CL-expr "or" CL-expr  {left} 
  CL-expr.CLIfThen = 
  	"if" CL-expr "then" CL-expr 
  CL-expr.CLIfThenElse = 
  	"if" CL-expr "then" CL-expr "else" CL-expr 
  CL-expr.CLWhile = 
  	"while" CL-expr "do" CL-expr "done" 
  CL-expr.CLForTo = 
  	"for" CL-lowercase-ident "=" CL-expr "to" CL-expr "do" CL-expr "done" 
  CL-expr.CLForDownto = 
  	"for" CL-lowercase-ident "=" CL-expr "downto" CL-expr "do" CL-expr "done" 
  CL-expr.CLSemi = 
  	CL-expr ";" CL-expr  {right}
  CL-expr.CLMatch = 
  	"match" CL-expr "with" CL-simple-matching 
  CL-expr.CLFun = 
  	"fun" CL-multiple-matching 
  CL-expr.CLFunction = 
  	"function" CL-simple-matching 
  CL-expr.CLTry = 
  	"try" CL-expr "with" CL-simple-matching 
  CL-expr.CLIn = 
  	CL-value-definition "in" CL-expr 
  CL-simple-matching.CLSimple = 
  	CL-pattern "->" CL-expr 
  CL-simple-matching.CLSimpleAlts = 
  	CL-pattern "->" CL-expr "|" CL-simple-matching 
  CL-multiple-matching.CLMultiple = 
  	CL-pattern+ "->" CL-expr 
  CL-multiple-matching.CLMultipleAlts = 
  	CL-pattern+ "->" CL-expr "|" CL-multiple-matching 
  CL-value-definition.CLLet = 
  	"let" CL-let-binding CL-and-let-binding* 
  CL-value-definition.CLLetRec = 
  	"let" "rec" CL-let-binding CL-and-let-binding* 
  CL-let-binding.CLPattern = 
  	CL-pattern "=" CL-expr 
  CL-let-binding.CLFunction = 
  	CL-variable CL-pattern+ "=" CL-expr 

// Global definitions
  CL-type-definition.CLType = 
  	"type" CL-typedef CL-and-typedef* 
  CL-typedef.CLVariants = 
  	CL-type-params CL-lowercase-ident "=" CL-constr-decl CL-bar-constr-decl* 
  CL-typedef.CLRecord = 
  	CL-type-params CL-lowercase-ident "=" "{" CL-label-decl CL-semic-label-decl* "}" 
  CL-typedef.CLEquated = 
  	CL-type-params CL-lowercase-ident "==" CL-typexpr 
  CL-typedef.CLAbstract = 
  	CL-type-params CL-lowercase-ident 
  CL-type-params = 
  	CL-nothing 
  CL-type-params.CLTypeParam = 
  	CL-quote CL-lowercase-ident 
  CL-type-params.CLTypeParams = 
  	"(" CL-quote CL-lowercase-ident CL-comma-quote-lowercase-ident* ")" 
  CL-constr-decl.CLConstrDecl = 
  	CL-capitalized-global-name 
  CL-constr-decl.CLVariant = 
  	CL-capitalized-global-name "of" CL-typexpr 
  CL-label-decl.CLField = 
  	CL-label ":" CL-typexpr 
  CL-label-decl.CLMutable = 
  	"mutable" CL-label ":" CL-typexpr 
  CL-exception-definition.CLException = 
  	"exception" CL-constr-decl CL-and-constr-decl* 

// Directives
// Corrected CL-string to CL-string-literal
  CL-directive.CLOpen = 
  	"#" "open" CL-string-literal 
  CL-directive.CLClose = 
  	"#" "close" CL-string-literal 
  CL-directive.CLPragma = 
  	"#" CL-ident CL-string-literal 

// Module implementations
  CL-implementation.CLImpl = 
  	CL-impl-phrase-semis* 
  CL-impl-phrase-semis.CLImplSemis = 
  	CL-impl-phrase ";;" 
  CL-impl-phrase.CLExpr = 
  	CL-expr 
  CL-impl-phrase.CLValueDefinition = 
  	CL-value-definition 
  CL-impl-phrase.CLTypeDefinition = 
  	CL-type-definition 
  CL-impl-phrase.CLExceptionDefinition = 
  	CL-exception-definition 
  CL-impl-phrase.CLDirective = 
  	CL-directive 


// Module interfaces
//  CL-interface.CLIntf = <<CL-intf-phrase-semis*>>
//  CL-intf-phrase-semis.CLIntfSemis = <<CL-intf-phrase> ;;>
//  CL-intf-phrase = <<CL-value-declaration>>
//  CL-intf-phrase = <<CL-type-definition>>
//  CL-intf-phrase = <<CL-exception-definition>>
//  CL-intf-phrase = <<CL-directive>>
//  CL-value-declaration.CLValue = <value <CL-ident-typexpr+; separator="and">>
//  CL-ident-typexpr.CLIdentTypexpr = <<CL-ident> : <CL-typexpr>>


// Auxiliary sorts (needed for SDF3):

  CL-star-typexpr.CLStarTypexpr = 
  	"*" CL-typexpr
  CL-comma-typexpr.CLCommaTypexpr = 
  	"," CL-typexpr

  CL-comma-pattern.CLCommaPattern =
  	"," CL-pattern
  CL-semic-pattern.CLSemicPattern =
  	";" CL-pattern
  CL-semic-label-pattern.CLSemicLabelPattern =
  	";" CL-label "=" CL-pattern

  CL-comma-expr.CLCommaExpr = 
  	"," CL-expr
  CL-semic-expr.CLSemicExpr = 
  	";" CL-expr
  CL-semic-label-expr.CLSemicLabelExpr = 
  	";" CL-label "=" CL-expr
  CL-and-let-binding.CLAndLetbinding = 
  	"and" CL-let-binding

  CL-and-typedef.CLAndTypedef = 
  	"and" CL-typedef
  CL-bar-constr-decl.CLBarConstrdecl = 
  	"|" CL-constr-decl
  CL-semic-label-decl.CLSemicLabeldecl = 
  	";" CL-label-decl
  CL-comma-quote-lowercase-ident.CLQuoteLowercaseident = 
  	"," CL-quote CL-lowercase-ident
  CL-and-constr-decl.CLAndConstrdecl = 
  	"and" CL-constr-decl

// (Partial) disambiguation

// Type expressions
context-free priorities

  CL-typexpr.CLInstance  
> CL-typexpr.CLProduct
> CL-typexpr.CLFunction

context-free priorities

  CL-star-typexpr.CLStarTypexpr
> CL-typexpr.CLProduct 

// Patterns
context-free priorities

  CL-pattern.CLPatternConstr
> CL-pattern.CLPatternCons
> CL-pattern.CLPatternTuple 
> CL-pattern.CLElse
> CL-pattern.CLAs

context-free priorities

//  CL-pattern-plus.CLSome
{ CL-multiple-matching.CLMultiple
  CL-multiple-matching.CLMultipleAlts
  CL-let-binding.CLFunction
}
> CL-pattern.CLPatternConstr

context-free priorities

//  CL-comma-pattern-star.CLSome
  CL-comma-pattern.CLCommaPattern
> CL-pattern.CLPatternTuple

context-free priorities

  FCT.Xpattcommasequence4patterncommapatternstar =
	  "patt-comma-sequence" "[:" CL-pattern CL-comma-pattern* ":]"
> CL-pattern.CLPatternTuple


// Expressions
context-free priorities

  CL-expr.CLPrefix1
> CL-expr.CLField
> CL-expr.CLApp
// > CL-expr.CLConstr
> CL-expr.CLPrefix2
> CL-expr.CLInfix1
> CL-expr.CLInfix2
> CL-expr.CLInfix3
> CL-expr.CLInfix4
> CL-expr.CLCons
> CL-expr.CLInfix5
> CL-expr.CLInfix6
// > CL-expr.CLNot // CL implementation allows a = not b
> CL-expr.CLAnd
> CL-expr.CLOr
> CL-expr.CLTuple
>
{ CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
}
> CL-expr.CLSemi


context-free priorities

{ CL-expr.CLField 
  CL-expr.CLComponent 
  CL-expr.CLApp
  CL-expr.CLInfix1
  CL-expr.CLInfix2
  CL-expr.CLInfix3 
  CL-expr.CLInfix4
  CL-expr.CLCons 
  CL-expr.CLInfix5
  CL-expr.CLInfix6
  CL-expr.CLAnd
  CL-expr.CLOr
  CL-expr.CLTuple
  CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
  CL-expr.CLSemi
}
<0>. >
{ CL-expr.CLIfThen
  CL-expr.CLIfThenElse
  CL-expr.CLMatch
  CL-expr.CLFun
  CL-expr.CLFunction
  CL-expr.CLTry
  CL-expr.CLIn 
}

context-free priorities

{ CL-expr.CLField
  CL-expr.CLComponent 
  CL-expr.CLApp
  CL-expr.CLInfix1
  CL-expr.CLInfix2
  CL-expr.CLInfix3 
  CL-expr.CLInfix4
  CL-expr.CLCons 
  CL-expr.CLInfix5
  CL-expr.CLInfix6
}
<0>. >
  CL-expr.CLNot
> 
{ CL-expr.CLAnd
  CL-expr.CLOr
  CL-expr.CLTuple
  CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
}

context-free priorities

  CL-expr.CLPrefix1
<1>. > 
  CL-expr.CLComponent
<0>. >
{ CL-expr.CLApp
// CL-expr.CLConstr
  CL-expr.CLInfix1
  CL-expr.CLInfix2
  CL-expr.CLInfix3 
  CL-expr.CLInfix4
  CL-expr.CLCons 
  CL-expr.CLInfix5
  CL-expr.CLInfix6
  CL-expr.CLAnd
  CL-expr.CLOr
  CL-expr.CLTuple
  CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
}

context-free priorities

  CL-expr.CLApp
<0>. >
  CL-expr.CLConstant 

context-free priorities

{ CL-simple-matching.CLSimpleAlts
  CL-multiple-matching.CLMultipleAlts
} 
>
{ CL-expr.CLMatch
  CL-expr.CLFun
  CL-expr.CLFunction
  CL-expr.CLTry
  CL-expr.CLIn 

}

context-free priorities

  CL-comma-expr.CLCommaExpr
> CL-expr.CLTuple

context-free priorities

  FCT = "expr-comma-sequence" "[:" CL-expr CL-comma-expr* ":]"
> CL-expr.CLTuple
	  
context-free priorities

{ CL-expr.CLList
  CL-expr.CLVector
  CL-semic-expr.CLSemicExpr
  CL-expr.CLRecord
  CL-semic-label-expr.CLSemicLabelExpr
}
> CL-expr.CLSemi


context-free priorities
  FCT = "expr-semic-sequence" "[:" CL-expr CL-semic-expr* ":]"
> CL-expr.CLSemi



// Language extensions: Alternate syntax

context-free syntax

  CL-pattern.CLXPatternRecord = 
  	"{" CL-label "=" CL-pattern CL-semic-label-pattern* ";" "}" 
  CL-pattern.CLXPatternList = 
  	"[" CL-pattern CL-semic-pattern* ";" "]" 
  CL-expr.CLXList = 
  	"[" CL-expr CL-semic-expr* ";" "]" 
  CL-expr.CLXVector = 
  	"[|" CL-expr CL-semic-expr*";" "|]" 
  CL-expr.CLXRecord = 
  	"{" CL-label "=" CL-expr CL-semic-label-expr* ";" "}" 
  CL-expr.CLXAnd = 
  	CL-expr "&&" CL-expr  {left} 
  CL-expr.CLXOr = 
  	CL-expr "||" CL-expr  {left} 
  CL-expr.CLXSemi = 
  	CL-expr ";" CL-expr ";" 
  CL-expr.CLXMatch = 
  	"match" CL-expr "with" "|" CL-simple-matching 
  CL-expr.CLXFun = 
  	"fun" "|" CL-multiple-matching 
  CL-expr.CLXFunction = 
  	"function" "|" CL-simple-matching 
  CL-expr.CLXTry = 
  	"try" CL-expr "with" "|" CL-simple-matching 
  

context-free priorities

{ CL-expr.CLField
  CL-expr.CLComponent 
  CL-expr.CLApp
  CL-expr.CLInfix1
  CL-expr.CLInfix2
  CL-expr.CLInfix3 
  CL-expr.CLInfix4
  CL-expr.CLCons 
  CL-expr.CLInfix5
  CL-expr.CLInfix6 
  CL-expr.CLNot
}
> CL-expr.CLXAnd
> CL-expr.CLXOr
> CL-expr.CLTuple

context-free priorities

{ CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
}
> CL-expr.CLXSemi

context-free priorities

{ CL-expr.CLField
  CL-expr.CLComponent 
  CL-expr.CLApp
  CL-expr.CLInfix1
  CL-expr.CLInfix2
  CL-expr.CLInfix3 
  CL-expr.CLInfix4
  CL-expr.CLCons 
  CL-expr.CLInfix5
  CL-expr.CLInfix6 
  CL-expr.CLAnd
  CL-expr.CLOr
  CL-expr.CLTuple
  CL-expr.CLFieldUpdate
  CL-expr.CLComponentUpdate
  CL-expr.CLInfix7
  CL-expr.CLSemi
  CL-expr.CLXAnd
  CL-expr.CLXOr
  CL-expr.CLXSemi
} 
<0>. >
{ CL-expr.CLIfThen
  CL-expr.CLIfThenElse
  CL-expr.CLMatch
  CL-expr.CLXMatch
  CL-expr.CLFun
  CL-expr.CLXFun
  CL-expr.CLFunction 
  CL-expr.CLXFunction
  CL-expr.CLTry
  CL-expr.CLXTry
  CL-expr.CLIn
}

context-free priorities

  CL-expr.CLComponent
<0>. >
{ CL-expr.CLXAnd
  CL-expr.CLXOr
}

context-free priorities

{ CL-simple-matching.CLSimpleAlts
  CL-multiple-matching.CLMultipleAlts
}
>
{ CL-expr.CLMatch
  CL-expr.CLXMatch
  CL-expr.CLFun
  CL-expr.CLXFun
  CL-expr.CLFunction 
  CL-expr.CLXFunction
  CL-expr.CLTry
  CL-expr.CLXTry
  CL-expr.CLIn
}

context-free priorities

{ CL-expr.CLList
  CL-expr.CLXList
  CL-expr.CLVector
  CL-expr.CLXVector
  CL-semic-expr.CLSemicExpr
  CL-expr.CLRecord
  CL-expr.CLXRecord
  CL-semic-label-expr.CLSemicLabelExpr
}
> CL-expr.CLXSemi
> CL-expr.CLSemi
