module Haskell-Patterns
exports
  context-free syntax
    LPat -> Pat
    
%% with infix precedence:
%%  context-free priorities
%%      Pat QconopNoCons LPat -> Pat {cons("BinOpApp")}
%%    > XPat ConsOp Pat -> Pat {cons("BinOpApp")}  
%%  context-free syntax
%%    Pat QconopNoCons LPat -> XPat {cons("BinOpApp")}
%%    LPat -> XPat
%%    Qconop -> QconopNoCons
%%    ":" -> QconopNoCons  {reject}

%% without precedence    
    Pat Qconop LPat -> Pat {cons("BinOpApp")}

    APat -> LPat
    "-" Literal -> LPat {cons("Negation")}
    Gcon APat+ -> LPat {cons("ConstrApp")}
    
    Var -> APat
    Var "@" APat -> APat {cons("Named")}
    Gcon -> APat {cons("Constr")}
    Qcon LabeledPat -> APat {cons("Labeled")}
    "{" {FPat ","}* "}" -> LabeledPat {cons("LabeledPats"), ignore-layout}
    Literal -> APat
    "_" -> APat {cons("Wildcard")}
    "(" Pat ")" -> APat {bracket}
    "(" Pat "," {Pat ","}+ ")" -> APat {cons("Tuple")}
    "[" {Pat ","}+ "]" -> APat {cons("List")}
    "~" APat -> APat {cons("Irrefutable")}
    
    Qvar "=" Pat -> FPat {cons("PatBind")}

  lexical restrictions
    "~" -/- [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
    "-" -/- [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
    "|" -/- [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
