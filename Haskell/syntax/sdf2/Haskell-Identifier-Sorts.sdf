module Haskell-Identifier-Sorts
exports
  lexical syntax
    VARID       	-> Varid
    ReservedId  	-> Varid {reject}

    VARID 		-> Tyvar
    ReservedId 		-> Tyvar {reject}
    ReservedId2 	-> Tyvar {reject}

  context-free syntax
    Vars "," Var 	-> Vars 	{cons("Snoc")}
    Qvar 	 	-> Vars 	{cons("Ins")}

  context-free syntax
    "(" ")"        	-> Gcon 	{cons("Unit")}
    "[" "]"        	-> Gcon		{cons("EmptyList")}
    "(" ","+ ")"   	-> Gcon		{cons("Product")}
    Qcon           	-> Gcon		

  %% The following portion can be put into module Haskell-Infix
  %% in order to factor out infix operators from the kernel language

  context-free syntax

    %% variable identifiers

    Varid     -> Qvarid
    QVARID    -> Qvarid
    Varid           -> Var    {cons("Var")}
    Qvarid            -> Qvar


    %% infix operators

    Varop 		-> Op		{cons("Op")}
    Conop 		-> Op		{cons("ConOp")}

    %% variable operators

    Varsym  		-> Qvarsym
    Qvarsym1 		-> Qvarsym

    %% constructor operators

    Varsym        	-> Varop
    "`" Varid "`" 	-> Varop 	{cons("PrefOp")}

    Qvarsym        	-> Qvarop
    "`" Qvarid "`" 	-> Qvarop 	{cons("PrefOp")}

    Consym        	-> Conop
    "`" Conid "`" 	-> Conop 	{cons("PrefCon")}

    Gconsym        	-> Qconop
    "`" Qconid "`" 	-> Qconop 	{cons("PrefCon")}

    Qvarop 		  -> Qop
    Qconop 		  -> Qop

    Qconsym -> Gconsym
    ConsOp  -> Gconsym
    CONSOP -> ConsOp {cons("ConsOp")}





    Consym  		-> Qconsym
    QCONSYM 		-> Qconsym
    CONSYM 		-> Consym

    %% make prefix symbols from infix symbols

    "(" Varsym ")" 	-> Var 		{cons("BinOp")}
    "(" Qvarsym ")" 	-> Qvar 	{cons("BinOp")}
    "(" Consym ")" 	-> Con 		{cons("BinCon")}
    "(" Qconsym ")" 	-> Qcon 	{cons("BinCon")}
    

  context-free syntax
    VARSYM 		-> Varsym

    QVARSYM 		-> Qvarsym1

  context-free syntax
    CONID 		-> Tycon
    Tycon  		-> Qtycon
    QCONID 		-> Qtycon
    Tycon		-> Tycls
    Qtycon 		-> Qtycls
   
    %% constructor identifiers

    CONID     -> Conid
    Conid     -> Qconid
    QCONID    -> Qconid
    Conid           -> Con    {cons("ConId")}
    Qconid            -> Qcon


  %% in each of these cases the constructor ID in fact is a module ID
  %% that quantifies a variable, constructor, type or operator
  context-free restrictions
    Qconid -/- [\.] . [a-zA-Z\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
    Qconid -/- [\.] . [\_] %% . [A-Za-z0-9\'\_]
    Qconid -/- [\.] . [\:] %% . [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]

    Qtycon -/- [\.] . [a-zA-Z\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
    Qtycon -/- [\.] . [\_] %% . [A-Za-z0-9\'\_]
    Qtycon -/- [\.] . [\:] %% . [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]


  lexical syntax
    CONID -> Modid

  syntax
    <Modid-LEX> -> Modid
    Modid "." <VARID-LEX>           -> <QVARID-CF>  {cons("QVarId")}
    Modid "." <CONID-LEX>           -> <QCONID-CF>  {cons("QConId")}
    Modid "." <VARSYM-LEX>          -> <QVARSYM-CF> {cons("QVarSym")}
    Modid "." <CONSYM-LEX>          -> <QCONSYM-CF> {cons("QConSym")}
    
  syntax
    <CONID-LEX> "." <Modid-LEX> -> QModid {cons("QModId")}
    <CONID-LEX> "." QModid -> QModid {cons("QModId")}
    QModid -> Modid
    QModid -> <Modid-CF>
